created: 20170206183707038
description: a general purpose tally counter
modified: 20170206183715701
plugin-type: plugin
title: $:/plugins/botwhytho/tiddlyCounter
type: application/json
version: 0.0.60

{
    "tiddlers": {
        "$:/plugins/botwhytho/tiddlyCounter/newCounter.js": {
            "created": "20170206164054576",
            "title": "$:/plugins/botwhytho/tiddlyCounter/newCounter.js",
            "modified": "20170223013542007",
            "type": "application/javascript",
            "text": "/*\\\ntitle: $:/plugins/botwhytho/tiddlyCounter/newCounter.js\ntype: application/javascript\nmodule-type: macro\n\nMacro to Create Multiple Counters\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"newCounter\";\n\nexports.params = [\n\t{name: \"counterList\"}\n];\n/*\nRun the macro\n*/\n\nexports.run = function(counterList)  {\nvar items = counterList.split(\"|\");\nvar tmp = '<$importvariables filter=\"[[$:/plugins/botwhytho/tiddlyCounter]plugintiddlers[]]\">';\nitems.forEach(function(element, index, array){\ntmp = tmp + '<<tc_newItem \"' + element + '\">><br><br>';\n})\ntmp = tmp + \"</$importvariables>\";\nreturn tmp;\n}\n\n})();",
            "module-type": "macro"
        },
        "$:/plugins/botwhytho/tiddlyCounter/Readme": {
            "created": "20170206160547362",
            "title": "$:/plugins/botwhytho/tiddlyCounter/Readme",
            "modified": "20170206180337283",
            "text": "[img[$:/plugins/botwhytho/tiddlyCounter/sampleCounter.png]]\n\nThe tiddlyCounter plugin is a general purpose Tally Counter built on top of [[tiddlywiki|http://tiddlywiki.com/]] (this website which is an on-line journaling, brainstorming and productivity tool).\n\nIt is a macro you can add to any tiddler that creates buttons that increment a counter when you click on them. Currently, the total count for something is stored, as well as the time stamp for each occurrence. The time stamps are stored so that in future versions some stats can be calculated off of them.\n\n!!! __Why? (Some Use Cases)__\n\nI needed to count foot traffic at a mall to estimate potential sales for a business plan. I was able to easily count foot traffic for various stores at the same time from my browser on my cell phone. This would have been less flexible and bulky with a mechanical tally counter (can only count one event type), or with pen and paper.\n\n!!! __Planned Improvements__\n\n-Work is underway to calculate basic stats for events (like average rate) from the time stamp data that is being saved along with the overall tally.\n\n-Exploring ways to integrate with D3.js and/or other graphing libraries to provide great insight through graphing and visualizing events.\n\nFeedback, bug reports, suggestions and pull requests are encouraged. [[GitHub Repo|https://github.com/botwhytho/tiddlyCounter]]\n\n!!! __How to use__\n\nWhen you add the below macro to a tiddler and save it you will have three buttons (like on the sample screen shot above). As you click on them, a number will increment to the right of the respective button and you'll be able to easily count/track anything you want. \n\nIf you create a counter named \"Item1\", 2 tiddlers will be created in the background that store the counter data: \"Item1\" & \"Item1Data\". Item1 will contain the current count and Item1Data will contain a JSON object with the time stamp of each occurrence of the counted event. \n\nTo add/remove counters on a tiddler, just edit the tiddler that contains the macro and add/remove the item to the list of counters in the macro.\n\n```\n<<newCounter \"Item1|Item2|Item3\">>\n\nSpace for other notes. You can add this macro anywhere in a tiddler and you can take notes or have other content in the same tiddler.\n```"
        },
        "$:/plugins/botwhytho/tiddlyCounter/sampleCounter.png": {
            "created": "20170206175619340",
            "title": "$:/plugins/botwhytho/tiddlyCounter/sampleCounter.png",
            "type": "image/png",
            "text": "",
            "modified": "20170206175625695"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_start.js": {
            "created": "20170222183909721",
            "text": "/*\\\ntitle: $:/plugins/botwhytho/tiddlyCounter/tc_start.js\ntype: application/javascript\nmodule-type: macro\n\nMacro that records start time. If data tiddler does not exist, it is created.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"tc_start\";\n\nexports.params = [\n\t{name: \"td\"}\n];\n/*\nRun the macro\n*/\n\nexports.run = function(td) {\nvar tid = $tw.wiki.getTiddler(td);\nvar json = tid ? JSON.parse(tid.fields.text) : {readings:[{timestamps:[],start:0,finish:0}]};\njson.readings[json.readings.length-1].start = $tw.utils.stringifyDate(new Date());\nreturn JSON.stringify(json);\n};\n\n})();\n",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_start.js",
            "tags": "",
            "modified": "20170222221729295",
            "type": "application/javascript",
            "module-type": "macro"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_start_bt": {
            "created": "20170222184110938",
            "text": "\\define tc_start_bt(td)\n<$button>\n<$set name=\"status\" filter=\"[[$td$]has[created]]\" value={{$td$!!status}} emptyValue=\"Start/Stop\">\n<$text text=<<status>>/>\n</$set>\n<$action-setfield $tiddler=\"$td$\" text=<<tc_start \"$td$\">> type='application/json' status=\"Started\" />\n</$button>\n\\end\n",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_start_bt",
            "tags": "",
            "modified": "20170222184153698"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_stop.js": {
            "created": "20170222185312130",
            "text": "/*\\\ntitle: $:/plugins/botwhytho/tiddlyCounter/tc_stop.js\ntype: application/javascript\nmodule-type: macro\n\nMacro that records stop times.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"tc_stop\";\n\nexports.params = [\n\t{name: \"td\"}\n];\n/*\nRun the macro\n*/\n\nexports.run = function(td) {\nvar tid = $tw.wiki.getTiddler(td);\nvar json = JSON.parse(tid.fields.text);\njson.readings[json.readings.length-1].finish = $tw.utils.stringifyDate(new Date());\njson.readings.push({timestamps:[],start:0,finish:0});\nreturn JSON.stringify(json)\n};\n\n})();\n",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_stop.js",
            "tags": "",
            "modified": "20170222221512600",
            "type": "application/javascript",
            "module-type": "macro"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_stop_bt": {
            "created": "20170222185433728",
            "text": "\\define tc_stop_bt(td)\n<$button>\n{{$td$!!status}}\n<$action-setfield $tiddler=\"$td$\" text=<<tc_stop \"$td$\">> type='application/json' status=\"Stopped\" duration=<<tc_duration \"$td$\">> rate=<<tc_rate \"$td$\">> />\n</$button>\n\\end",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_stop_bt",
            "tags": "",
            "modified": "20170223025733384"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_increaseCount.js": {
            "created": "20170222223031940",
            "text": "/*\\\ntitle: $:/plugins/botwhytho/tiddlyCounter/tc_increaseCount.js\ntype: application/javascript\nmodule-type: macro\n\nMacro to increase counter value\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"tc_increaseCount\";\n\nexports.params = [\n\t{name: \"td\"}\n];\n/*\nRun the macro\n*/\n\nexports.run = function(td) {\n\t\t\tvar tid = $tw.wiki.getTiddler(td);\n\t\t\treturn (parseInt(tid.fields.count) || 0)+1;\n};\n\n})();\n",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_increaseCount.js",
            "tags": "",
            "modified": "20170222225114257",
            "type": "application/javascript",
            "module-type": "macro"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_countData.js": {
            "created": "20170222222824554",
            "text": "/*\\\ntitle: $:/plugins/botwhytho/tiddlyCounter/tc_countData.js\ntype: application/javascript\nmodule-type: macro\n\nMacro to return counter JSON data with new measurement appended\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"tc_countData\";\n\nexports.params = [\n\t{name: \"td\"}\n];\n/*\nRun the macro\n*/\n\nexports.run = function(td) {\nvar tid = $tw.wiki.getTiddler(td);\nvar json = JSON.parse(tid.fields.text);\njson.readings[json.readings.length-1].timestamps.push($tw.utils.stringifyDate(new Date()));\nreturn JSON.stringify(json);\n};\n\n})();\n",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_countData.js",
            "tags": "",
            "modified": "20170222223025438",
            "type": "application/javascript",
            "module-type": "macro"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_plusOne_bt": {
            "created": "20170222222708189",
            "text": "\\define tc_plusOne_bt(td)\n<$button>\n$td$ | {{$td$!!count}}\n<$action-setfield $tiddler=\"$td$\" text=<<tc_countData \"$td$\">> type='application/json' count=<<tc_increaseCount \"$td$\">> duration=<<tc_duration \"$td$\">> rate=<<tc_rate \"$td$\">> />\n</$button>\n\\end",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_plusOne_bt",
            "tags": "",
            "modified": "20170223025849286"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_plusOne_disable": {
            "created": "20170222222613892",
            "text": "\\define tc_plusOne_disable(td)\n<$button>\n$td$ | {{$td$!!count}} | Click Start/Stop to Begin\n</$button>\n\\end\n",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_plusOne_disable",
            "tags": "",
            "modified": "20170222222657370"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_newItem": {
            "created": "20170223011603003",
            "text": "\\define tc_newItem(td)\n<$set name=\"tc_startStop\" filter=\"[[$td$]status[Started]]\" value=<<tc_stop_bt \"$td$\">> emptyValue=<<tc_start_bt \"$td$\">>>\n<<tc_startStop \"$td$\">>\n</$set>\n<$set name=\"tc_plusOne\" filter=\"[[$td$]status[Started]]\" value=<<tc_plusOne_bt \"$td$\">> emptyValue=<<tc_plusOne_disable \"$td$\">>>\n<<tc_plusOne \"$td$\">> {{$td$!!rate}} /hr\n</$set>\n\\end\n",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_newItem",
            "tags": "",
            "modified": "20170223025601025"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_duration.js": {
            "created": "20170223022531496",
            "text": "/*\\\ntitle: $:/plugins/botwhytho/tiddlyCounter/tc_duration.js\ntype: application/javascript\nmodule-type: macro\n\nMacro that updates current duration and stores it as a tiddler field. This, combined with count assist in calculating rate\npotentially good for ouside re-use without going into the internal JSON internals\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"tc_duration\";\n\nexports.params = [\n\t{name: \"td\"}\n];\n/*\nRun the macro\n*/\n\nexports.run = function(td) {\nvar tid = $tw.wiki.getTiddler(td);\nvar json = JSON.parse(tid.fields.text);\n\nif (json.readings[json.readings.length-1].timestamps.length == 0) {\n  return (parseFloat(tid.fields.duration) || 0.00) + Math.round(Math.abs(new Date() - $tw.utils.parseDate(json.readings[json.readings.length-1].start))/1000);\n} else {\n  return parseFloat(tid.fields.duration) + Math.round(Math.abs(new Date() - $tw.utils.parseDate(json.readings[json.readings.length-1].timestamps[json.readings[json.readings.length-1].timestamps.length-1]))/1000);\n}\n\n};\n\n})();\n",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_duration.js",
            "tags": "",
            "modified": "20170223022732171",
            "type": "application/javascript",
            "module-type": "macro"
        },
        "$:/plugins/botwhytho/tiddlyCounter/tc_rate.js": {
            "created": "20170223023220929",
            "text": "/*\\\ntitle: $:/plugins/botwhytho/tiddlyCounter/tc_rate.js\ntype: application/javascript\nmodule-type: macro\n\nMacro that updates the current average rate of phenomenom being tracked in occurences per hour\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"tc_rate\";\n\nexports.params = [\n\t{name: \"td\"}\n];\n/*\nRun the macro\n*/\n\nexports.run = function(td) {\nvar tid = $tw.wiki.getTiddler(td);\nreturn tid.fields.count ? (parseFloat(tid.fields.count) / parseFloat(tid.fields.duration) * 3600).toFixed(2) : \"\";\n};\n\n})();\n",
            "title": "$:/plugins/botwhytho/tiddlyCounter/tc_rate.js",
            "tags": "",
            "modified": "20170223030510655",
            "type": "application/javascript",
            "module-type": "macro"
        }
    }
}